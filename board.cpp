#include "board.h"
#include <iostream>

/**
 * @brief For converting a move number 0-63 to a bitmask.
*/
const bitbrd MOVEMASK[64] = {
0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008,
0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800,
0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000,
0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000,
0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000,
0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000,
0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000,
0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000,
0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
};

const int index64[64] = {
    0, 47,  1, 56, 48, 27,  2, 60,
   57, 49, 41, 37, 28, 16,  3, 61,
   54, 58, 35, 52, 50, 42, 21, 44,
   38, 32, 29, 23, 17, 11,  4, 62,
   46, 55, 26, 59, 40, 36, 15, 53,
   34, 51, 20, 43, 31, 22, 10, 45,
   25, 39, 14, 33, 19, 30,  9, 24,
   13, 18,  8, 12,  7,  6,  5, 63
};

const bitbrd NORTHRAY[64] = {
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 
0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 
0x0000000000000101, 0x0000000000000202, 0x0000000000000404, 0x0000000000000808, 
0x0000000000001010, 0x0000000000002020, 0x0000000000004040, 0x0000000000008080, 
0x0000000000010101, 0x0000000000020202, 0x0000000000040404, 0x0000000000080808, 
0x0000000000101010, 0x0000000000202020, 0x0000000000404040, 0x0000000000808080, 
0x0000000001010101, 0x0000000002020202, 0x0000000004040404, 0x0000000008080808, 
0x0000000010101010, 0x0000000020202020, 0x0000000040404040, 0x0000000080808080, 
0x0000000101010101, 0x0000000202020202, 0x0000000404040404, 0x0000000808080808, 
0x0000001010101010, 0x0000002020202020, 0x0000004040404040, 0x0000008080808080, 
0x0000010101010101, 0x0000020202020202, 0x0000040404040404, 0x0000080808080808, 
0x0000101010101010, 0x0000202020202020, 0x0000404040404040, 0x0000808080808080, 
0x0001010101010101, 0x0002020202020202, 0x0004040404040404, 0x0008080808080808, 
0x0010101010101010, 0x0020202020202020, 0x0040404040404040, 0x0080808080808080
};

const bitbrd SOUTHRAY[64] = {
0x0101010101010100, 0x0202020202020200, 0x0404040404040400, 0x0808080808080800, 
0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000, 
0x0101010101010000, 0x0202020202020000, 0x0404040404040000, 0x0808080808080000, 
0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000, 
0x0101010101000000, 0x0202020202000000, 0x0404040404000000, 0x0808080808000000, 
0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000, 
0x0101010100000000, 0x0202020200000000, 0x0404040400000000, 0x0808080800000000, 
0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000, 
0x0101010000000000, 0x0202020000000000, 0x0404040000000000, 0x0808080000000000, 
0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000, 
0x0101000000000000, 0x0202000000000000, 0x0404000000000000, 0x0808000000000000, 
0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000, 
0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 
0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000
};

const bitbrd EASTRAY[64] = {
0x00000000000000fe, 0x00000000000000fc, 0x00000000000000f8, 0x00000000000000f0, 
0x00000000000000e0, 0x00000000000000c0, 0x0000000000000080, 0x0000000000000000, 
0x000000000000fe00, 0x000000000000fc00, 0x000000000000f800, 0x000000000000f000, 
0x000000000000e000, 0x000000000000c000, 0x0000000000008000, 0x0000000000000000, 
0x0000000000fe0000, 0x0000000000fc0000, 0x0000000000f80000, 0x0000000000f00000, 
0x0000000000e00000, 0x0000000000c00000, 0x0000000000800000, 0x0000000000000000, 
0x00000000fe000000, 0x00000000fc000000, 0x00000000f8000000, 0x00000000f0000000, 
0x00000000e0000000, 0x00000000c0000000, 0x0000000080000000, 0x0000000000000000, 
0x000000fe00000000, 0x000000fc00000000, 0x000000f800000000, 0x000000f000000000, 
0x000000e000000000, 0x000000c000000000, 0x0000008000000000, 0x0000000000000000, 
0x0000fe0000000000, 0x0000fc0000000000, 0x0000f80000000000, 0x0000f00000000000, 
0x0000e00000000000, 0x0000c00000000000, 0x0000800000000000, 0x0000000000000000, 
0x00fe000000000000, 0x00fc000000000000, 0x00f8000000000000, 0x00f0000000000000, 
0x00e0000000000000, 0x00c0000000000000, 0x0080000000000000, 0x0000000000000000, 
0xfe00000000000000, 0xfc00000000000000, 0xf800000000000000, 0xf000000000000000, 
0xe000000000000000, 0xc000000000000000, 0x8000000000000000, 0x0000000000000000
};

const bitbrd SERAY[64] = {
0x8040201008040200, 0x0080402010080400, 0x0000804020100800, 0x0000008040201000, 
0x0000000080402000, 0x0000000000804000, 0x0000000000008000, 0x0000000000000000, 
0x4020100804020000, 0x8040201008040000, 0x0080402010080000, 0x0000804020100000, 
0x0000008040200000, 0x0000000080400000, 0x0000000000800000, 0x0000000000000000, 
0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x0080402010000000, 
0x0000804020000000, 0x0000008040000000, 0x0000000080000000, 0x0000000000000000, 
0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000, 
0x0080402000000000, 0x0000804000000000, 0x0000008000000000, 0x0000000000000000, 
0x0804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000, 
0x8040200000000000, 0x0080400000000000, 0x0000800000000000, 0x0000000000000000, 
0x0402000000000000, 0x0804000000000000, 0x1008000000000000, 0x2010000000000000, 
0x4020000000000000, 0x8040000000000000, 0x0080000000000000, 0x0000000000000000, 
0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 
0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000
};

const bitbrd NERAY[64] = {
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 
0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 0x0000000000000000, 
0x0000000000000204, 0x0000000000000408, 0x0000000000000810, 0x0000000000001020, 
0x0000000000002040, 0x0000000000004080, 0x0000000000008000, 0x0000000000000000, 
0x0000000000020408, 0x0000000000040810, 0x0000000000081020, 0x0000000000102040, 
0x0000000000204080, 0x0000000000408000, 0x0000000000800000, 0x0000000000000000, 
0x0000000002040810, 0x0000000004081020, 0x0000000008102040, 0x0000000010204080, 
0x0000000020408000, 0x0000000040800000, 0x0000000080000000, 0x0000000000000000, 
0x0000000204081020, 0x0000000408102040, 0x0000000810204080, 0x0000001020408000, 
0x0000002040800000, 0x0000004080000000, 0x0000008000000000, 0x0000000000000000, 
0x0000020408102040, 0x0000040810204080, 0x0000081020408000, 0x0000102040800000, 
0x0000204080000000, 0x0000408000000000, 0x0000800000000000, 0x0000000000000000, 
0x0002040810204080, 0x0004081020408000, 0x0008102040800000, 0x0010204080000000, 
0x0020408000000000, 0x0040800000000000, 0x0080000000000000, 0x0000000000000000
};

const bitbrd WESTRAY[64] = {
0x0000000000000000, 0x0000000000000001, 0x0000000000000003, 0x0000000000000007, 
0x000000000000000f, 0x000000000000001f, 0x000000000000003f, 0x000000000000007f, 
0x0000000000000000, 0x0000000000000100, 0x0000000000000300, 0x0000000000000700, 
0x0000000000000f00, 0x0000000000001f00, 0x0000000000003f00, 0x0000000000007f00, 
0x0000000000000000, 0x0000000000010000, 0x0000000000030000, 0x0000000000070000, 
0x00000000000f0000, 0x00000000001f0000, 0x00000000003f0000, 0x00000000007f0000, 
0x0000000000000000, 0x0000000001000000, 0x0000000003000000, 0x0000000007000000, 
0x000000000f000000, 0x000000001f000000, 0x000000003f000000, 0x000000007f000000, 
0x0000000000000000, 0x0000000100000000, 0x0000000300000000, 0x0000000700000000, 
0x0000000f00000000, 0x0000001f00000000, 0x0000003f00000000, 0x0000007f00000000, 
0x0000000000000000, 0x0000010000000000, 0x0000030000000000, 0x0000070000000000, 
0x00000f0000000000, 0x00001f0000000000, 0x00003f0000000000, 0x00007f0000000000, 
0x0000000000000000, 0x0001000000000000, 0x0003000000000000, 0x0007000000000000, 
0x000f000000000000, 0x001f000000000000, 0x003f000000000000, 0x007f000000000000, 
0x0000000000000000, 0x0100000000000000, 0x0300000000000000, 0x0700000000000000, 
0x0f00000000000000, 0x1f00000000000000, 0x3f00000000000000, 0x7f00000000000000
};

const bitbrd NWRAY[64] = {
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 
0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 
0x0000000000000000, 0x0000000000000100, 0x0000000000000201, 0x0000000000000402, 
0x0000000000000804, 0x0000000000001008, 0x0000000000002010, 0x0000000000004020, 
0x0000000000000000, 0x0000000000010000, 0x0000000000020100, 0x0000000000040201, 
0x0000000000080402, 0x0000000000100804, 0x0000000000201008, 0x0000000000402010, 
0x0000000000000000, 0x0000000001000000, 0x0000000002010000, 0x0000000004020100, 
0x0000000008040201, 0x0000000010080402, 0x0000000020100804, 0x0000000040201008, 
0x0000000000000000, 0x0000000100000000, 0x0000000201000000, 0x0000000402010000, 
0x0000000804020100, 0x0000001008040201, 0x0000002010080402, 0x0000004020100804, 
0x0000000000000000, 0x0000010000000000, 0x0000020100000000, 0x0000040201000000, 
0x0000080402010000, 0x0000100804020100, 0x0000201008040201, 0x0000402010080402, 
0x0000000000000000, 0x0001000000000000, 0x0002010000000000, 0x0004020100000000, 
0x0008040201000000, 0x0010080402010000, 0x0020100804020100, 0x0040201008040201
};

const bitbrd SWRAY[64] = {
0x0000000000000000, 0x0000000000000100, 0x0000000000010200, 0x0000000001020400, 
0x0000000102040800, 0x0000010204081000, 0x0001020408102000, 0x0102040810204000, 
0x0000000000000000, 0x0000000000010000, 0x0000000001020000, 0x0000000102040000, 
0x0000010204080000, 0x0001020408100000, 0x0102040810200000, 0x0204081020400000, 
0x0000000000000000, 0x0000000001000000, 0x0000000102000000, 0x0000010204000000, 
0x0001020408000000, 0x0102040810000000, 0x0204081020000000, 0x0408102040000000, 
0x0000000000000000, 0x0000000100000000, 0x0000010200000000, 0x0001020400000000, 
0x0102040800000000, 0x0204081000000000, 0x0408102000000000, 0x0810204000000000, 
0x0000000000000000, 0x0000010000000000, 0x0001020000000000, 0x0102040000000000, 
0x0204080000000000, 0x0408100000000000, 0x0810200000000000, 0x1020400000000000, 
0x0000000000000000, 0x0001000000000000, 0x0102000000000000, 0x0204000000000000, 
0x0408000000000000, 0x0810000000000000, 0x1020000000000000, 0x2040000000000000, 
0x0000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 
0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000
};

const bitbrd NORTHRAYI[64] = {
0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 
0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 
0x0000000000000101, 0x0000000000000202, 0x0000000000000404, 0x0000000000000808, 
0x0000000000001010, 0x0000000000002020, 0x0000000000004040, 0x0000000000008080, 
0x0000000000010101, 0x0000000000020202, 0x0000000000040404, 0x0000000000080808, 
0x0000000000101010, 0x0000000000202020, 0x0000000000404040, 0x0000000000808080, 
0x0000000001010101, 0x0000000002020202, 0x0000000004040404, 0x0000000008080808, 
0x0000000010101010, 0x0000000020202020, 0x0000000040404040, 0x0000000080808080, 
0x0000000101010101, 0x0000000202020202, 0x0000000404040404, 0x0000000808080808, 
0x0000001010101010, 0x0000002020202020, 0x0000004040404040, 0x0000008080808080, 
0x0000010101010101, 0x0000020202020202, 0x0000040404040404, 0x0000080808080808, 
0x0000101010101010, 0x0000202020202020, 0x0000404040404040, 0x0000808080808080, 
0x0001010101010101, 0x0002020202020202, 0x0004040404040404, 0x0008080808080808, 
0x0010101010101010, 0x0020202020202020, 0x0040404040404040, 0x0080808080808080, 
0x0101010101010101, 0x0202020202020202, 0x0404040404040404, 0x0808080808080808, 
0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080
};

const bitbrd SOUTHRAYI[64] = {
0x0101010101010101, 0x0202020202020202, 0x0404040404040404, 0x0808080808080808, 
0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080, 
0x0101010101010100, 0x0202020202020200, 0x0404040404040400, 0x0808080808080800, 
0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000, 
0x0101010101010000, 0x0202020202020000, 0x0404040404040000, 0x0808080808080000, 
0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000, 
0x0101010101000000, 0x0202020202000000, 0x0404040404000000, 0x0808080808000000, 
0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000, 
0x0101010100000000, 0x0202020200000000, 0x0404040400000000, 0x0808080800000000, 
0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000, 
0x0101010000000000, 0x0202020000000000, 0x0404040000000000, 0x0808080000000000, 
0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000, 
0x0101000000000000, 0x0202000000000000, 0x0404000000000000, 0x0808000000000000, 
0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000, 
0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 
0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
};

const bitbrd EASTRAYI[64] = {
0x00000000000000ff, 0x00000000000000fe, 0x00000000000000fc, 0x00000000000000f8, 
0x00000000000000f0, 0x00000000000000e0, 0x00000000000000c0, 0x0000000000000080, 
0x000000000000ff00, 0x000000000000fe00, 0x000000000000fc00, 0x000000000000f800, 
0x000000000000f000, 0x000000000000e000, 0x000000000000c000, 0x0000000000008000, 
0x0000000000ff0000, 0x0000000000fe0000, 0x0000000000fc0000, 0x0000000000f80000, 
0x0000000000f00000, 0x0000000000e00000, 0x0000000000c00000, 0x0000000000800000, 
0x00000000ff000000, 0x00000000fe000000, 0x00000000fc000000, 0x00000000f8000000, 
0x00000000f0000000, 0x00000000e0000000, 0x00000000c0000000, 0x0000000080000000, 
0x000000ff00000000, 0x000000fe00000000, 0x000000fc00000000, 0x000000f800000000, 
0x000000f000000000, 0x000000e000000000, 0x000000c000000000, 0x0000008000000000, 
0x0000ff0000000000, 0x0000fe0000000000, 0x0000fc0000000000, 0x0000f80000000000, 
0x0000f00000000000, 0x0000e00000000000, 0x0000c00000000000, 0x0000800000000000, 
0x00ff000000000000, 0x00fe000000000000, 0x00fc000000000000, 0x00f8000000000000, 
0x00f0000000000000, 0x00e0000000000000, 0x00c0000000000000, 0x0080000000000000, 
0xff00000000000000, 0xfe00000000000000, 0xfc00000000000000, 0xf800000000000000, 
0xf000000000000000, 0xe000000000000000, 0xc000000000000000, 0x8000000000000000
};

const bitbrd SERAYI[64] = {
0x8040201008040201, 0x0080402010080402, 0x0000804020100804, 0x0000008040201008, 
0x0000000080402010, 0x0000000000804020, 0x0000000000008040, 0x0000000000000080, 
0x4020100804020100, 0x8040201008040200, 0x0080402010080400, 0x0000804020100800, 
0x0000008040201000, 0x0000000080402000, 0x0000000000804000, 0x0000000000008000, 
0x2010080402010000, 0x4020100804020000, 0x8040201008040000, 0x0080402010080000, 
0x0000804020100000, 0x0000008040200000, 0x0000000080400000, 0x0000000000800000, 
0x1008040201000000, 0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 
0x0080402010000000, 0x0000804020000000, 0x0000008040000000, 0x0000000080000000, 
0x0804020100000000, 0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 
0x8040201000000000, 0x0080402000000000, 0x0000804000000000, 0x0000008000000000, 
0x0402010000000000, 0x0804020000000000, 0x1008040000000000, 0x2010080000000000, 
0x4020100000000000, 0x8040200000000000, 0x0080400000000000, 0x0000800000000000, 
0x0201000000000000, 0x0402000000000000, 0x0804000000000000, 0x1008000000000000, 
0x2010000000000000, 0x4020000000000000, 0x8040000000000000, 0x0080000000000000, 
0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 
0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
};

const bitbrd NERAYI[64] = {
0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 
0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 
0x0000000000000102, 0x0000000000000204, 0x0000000000000408, 0x0000000000000810, 
0x0000000000001020, 0x0000000000002040, 0x0000000000004080, 0x0000000000008000, 
0x0000000000010204, 0x0000000000020408, 0x0000000000040810, 0x0000000000081020, 
0x0000000000102040, 0x0000000000204080, 0x0000000000408000, 0x0000000000800000, 
0x0000000001020408, 0x0000000002040810, 0x0000000004081020, 0x0000000008102040, 
0x0000000010204080, 0x0000000020408000, 0x0000000040800000, 0x0000000080000000, 
0x0000000102040810, 0x0000000204081020, 0x0000000408102040, 0x0000000810204080, 
0x0000001020408000, 0x0000002040800000, 0x0000004080000000, 0x0000008000000000, 
0x0000010204081020, 0x0000020408102040, 0x0000040810204080, 0x0000081020408000, 
0x0000102040800000, 0x0000204080000000, 0x0000408000000000, 0x0000800000000000, 
0x0001020408102040, 0x0002040810204080, 0x0004081020408000, 0x0008102040800000, 
0x0010204080000000, 0x0020408000000000, 0x0040800000000000, 0x0080000000000000, 
0x0102040810204080, 0x0204081020408000, 0x0408102040800000, 0x0810204080000000, 
0x1020408000000000, 0x2040800000000000, 0x4080000000000000, 0x8000000000000000
};

const bitbrd WESTRAYI[64] = {
0x0000000000000001, 0x0000000000000003, 0x0000000000000007, 0x000000000000000f, 
0x000000000000001f, 0x000000000000003f, 0x000000000000007f, 0x00000000000000ff, 
0x0000000000000100, 0x0000000000000300, 0x0000000000000700, 0x0000000000000f00, 
0x0000000000001f00, 0x0000000000003f00, 0x0000000000007f00, 0x000000000000ff00, 
0x0000000000010000, 0x0000000000030000, 0x0000000000070000, 0x00000000000f0000, 
0x00000000001f0000, 0x00000000003f0000, 0x00000000007f0000, 0x0000000000ff0000, 
0x0000000001000000, 0x0000000003000000, 0x0000000007000000, 0x000000000f000000, 
0x000000001f000000, 0x000000003f000000, 0x000000007f000000, 0x00000000ff000000, 
0x0000000100000000, 0x0000000300000000, 0x0000000700000000, 0x0000000f00000000, 
0x0000001f00000000, 0x0000003f00000000, 0x0000007f00000000, 0x000000ff00000000, 
0x0000010000000000, 0x0000030000000000, 0x0000070000000000, 0x00000f0000000000, 
0x00001f0000000000, 0x00003f0000000000, 0x00007f0000000000, 0x0000ff0000000000, 
0x0001000000000000, 0x0003000000000000, 0x0007000000000000, 0x000f000000000000, 
0x001f000000000000, 0x003f000000000000, 0x007f000000000000, 0x00ff000000000000, 
0x0100000000000000, 0x0300000000000000, 0x0700000000000000, 0x0f00000000000000, 
0x1f00000000000000, 0x3f00000000000000, 0x7f00000000000000, 0xff00000000000000
};

const bitbrd NWRAYI[64] = {
0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 
0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 
0x0000000000000100, 0x0000000000000201, 0x0000000000000402, 0x0000000000000804, 
0x0000000000001008, 0x0000000000002010, 0x0000000000004020, 0x0000000000008040, 
0x0000000000010000, 0x0000000000020100, 0x0000000000040201, 0x0000000000080402, 
0x0000000000100804, 0x0000000000201008, 0x0000000000402010, 0x0000000000804020, 
0x0000000001000000, 0x0000000002010000, 0x0000000004020100, 0x0000000008040201, 
0x0000000010080402, 0x0000000020100804, 0x0000000040201008, 0x0000000080402010, 
0x0000000100000000, 0x0000000201000000, 0x0000000402010000, 0x0000000804020100, 
0x0000001008040201, 0x0000002010080402, 0x0000004020100804, 0x0000008040201008, 
0x0000010000000000, 0x0000020100000000, 0x0000040201000000, 0x0000080402010000, 
0x0000100804020100, 0x0000201008040201, 0x0000402010080402, 0x0000804020100804, 
0x0001000000000000, 0x0002010000000000, 0x0004020100000000, 0x0008040201000000, 
0x0010080402010000, 0x0020100804020100, 0x0040201008040201, 0x0080402010080402, 
0x0100000000000000, 0x0201000000000000, 0x0402010000000000, 0x0804020100000000, 
0x1008040201000000, 0x2010080402010000, 0x4020100804020100, 0x8040201008040201
};

const bitbrd SWRAYI[64] = {
0x0000000000000001, 0x0000000000000102, 0x0000000000010204, 0x0000000001020408, 
0x0000000102040810, 0x0000010204081020, 0x0001020408102040, 0x0102040810204080, 
0x0000000000000100, 0x0000000000010200, 0x0000000001020400, 0x0000000102040800, 
0x0000010204081000, 0x0001020408102000, 0x0102040810204000, 0x0204081020408000, 
0x0000000000010000, 0x0000000001020000, 0x0000000102040000, 0x0000010204080000, 
0x0001020408100000, 0x0102040810200000, 0x0204081020400000, 0x0408102040800000, 
0x0000000001000000, 0x0000000102000000, 0x0000010204000000, 0x0001020408000000, 
0x0102040810000000, 0x0204081020000000, 0x0408102040000000, 0x0810204080000000, 
0x0000000100000000, 0x0000010200000000, 0x0001020400000000, 0x0102040800000000, 
0x0204081000000000, 0x0408102000000000, 0x0810204000000000, 0x1020408000000000, 
0x0000010000000000, 0x0001020000000000, 0x0102040000000000, 0x0204080000000000, 
0x0408100000000000, 0x0810200000000000, 0x1020400000000000, 0x2040800000000000, 
0x0001000000000000, 0x0102000000000000, 0x0204000000000000, 0x0408000000000000, 
0x0810000000000000, 0x1020000000000000, 0x2040000000000000, 0x4080000000000000, 
0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 
0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
};

/**
 * @brief Make a 8x8 othello board and initialize it to the standard setup.
 */
Board::Board() {
    taken = 0x0000001818000000;
    black = 0x0000000810000000;
    legal = 0x0000102004080000;
}

/**
 * @brief A constructor allowing specification of taken, black, legal.
*/
Board::Board(bitbrd t, bitbrd b, bitbrd l) {
    taken = t;
    black = b;
    legal = l;
}

/**
 * @brief Destructor for the board.
 */
Board::~Board() {
}

/**
 * @brief Returns a copy of this board.
 */
Board *Board::copy() {
    Board *newBoard = new Board(taken, black, legal);
    return newBoard;
}
 
/**
 * @brief Returns true if the game is finished; false otherwise. The game is
 * finished if neither side has a legal move.
 */
bool Board::isDone() {
    return !(hasMoves(BLACK) || hasMoves(WHITE));
}

/**
 * @brief Returns true if there are legal moves for the given side.
 */
bool Board::hasMoves(Side side) {
    return numLegalMoves(side);
}

/**
 * @brief Returns true if a move is legal for the given side; false otherwise.
 * For debugging only, not used anywhere in this program.
 */
bool Board::checkMove(Move *m, Side side) {
    // Passing is only legal if you have no moves.
    if (m == NULL) return !hasMoves(side);

    if(legal == 0xFFFF000000000000)
        getLegal(side);

    return legal & MOVEMASK[m->getX() + 8 * m->getY()];
}

/*
 * Overloaded function taking x, y instead of a move object for internal use.
 * Passing is not an option here.
*/
bool Board::checkMove(int index, Side side) {
    if(legal == 0xFFFF000000000000)
        getLegal(side);

    return legal & MOVEMASK[index];
}

/**
 * @brief Modifies the board to reflect the specified move.
 * 
 * This algorithm modifies the bitboards by performing the Dumb7Fill in all
 * eight directions, with the move as the generator and the opponent's piece
 * set as the propagator, checking for the anchor at the end and discarding the
 * result if the anchor is not present.
 */
void Board::doMove(int index, Side side) {
    // A NULL move means pass.
    if (index == MOVE_NULL) {
        legal = 0xFFFF000000000000;
        return;
    }

    // Ignore if move is invalid.
    if (!checkMove(index, side)) return;

    bitbrd changeMask = 0;
    bitbrd pos = (side == WHITE) ? ~black : ~(taken^black);
    bitbrd self = (side == BLACK) ? black : taken^black;
    bitbrd block, result;

    // north fills
    result = NORTHRAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanReverse(block);
        if(self & MOVEMASK[anchor])
            changeMask |= (result ^ NORTHRAYI[anchor]) | MOVEMASK[index];
    }

    // south fills
    result = SOUTHRAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanForward(block);
        if(self & MOVEMASK[anchor]) {
            result ^= SOUTHRAYI[anchor];
            changeMask |= result | MOVEMASK[index];
        }
    }

    // east fills
    result = EASTRAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanForward(block);
        if(self & MOVEMASK[anchor]) {
            result ^= EASTRAYI[anchor];
            changeMask |= result | MOVEMASK[index];
        }
    }

    // west fills
    result = WESTRAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanReverse(block);
        if(self & MOVEMASK[anchor]) {
            result ^= WESTRAYI[anchor];
            changeMask |= result | MOVEMASK[index];
        }
    }

    // ne fills
    result = NERAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanReverse(block);
        if(self & MOVEMASK[anchor]) {
            result ^= NERAYI[anchor];
            changeMask |= result | MOVEMASK[index];
        }
    }

    // nw fills
    result = NWRAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanReverse(block);
        if(self & MOVEMASK[anchor]) {
            result ^= NWRAYI[anchor];
            changeMask |= result | MOVEMASK[index];
        }
    }

    // sw fills
    result = SWRAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanForward(block);
        if(self & MOVEMASK[anchor]) {
            result ^= SWRAYI[anchor];
            changeMask |= result | MOVEMASK[index];
        }
    }

    // se fills
    result = SERAY[index];
    block = result & pos;
    if(block) {
        int anchor = bitScanForward(block);
        if(self & MOVEMASK[anchor]) {
            result ^= SERAYI[anchor];
            changeMask |= result | MOVEMASK[index];
        }
    }

    // update taken, black, legal
    taken |= changeMask;
    if(side == BLACK)
        black |= changeMask;
    else
        black &= ~changeMask;

    legal = 0xFFFF000000000000;
}

/**
 * @brief Returns a vector of all legal moves.
*/
vector<int> Board::getLegalMoves(Side side) {
    vector<int> result;
    getLegal(side);
    bitbrd temp = legal;
    bitbrd c = temp & 0x8100000000000081;
    temp &= ~0x8100000000000081;
    while(c) {
        result.push_back(bitScanForward(c));
        c &= c-1;
    }
    while(temp) {
        result.push_back(bitScanForward(temp));
        temp &= temp-1;
    }
    return result;
}

/**
 * @brief Stores all legal moves for a side in the bitbrd object legal, for
 * quick retrieval later by checkMove().
 * 
 * This method operates by checking in all eight directions, first for the line
 * of pieces of the opposite color, then for the anchor once the line ends.
*/
void Board::getLegal(Side side) {
    bitbrd result = 0;
    bitbrd tempM;
    bitbrd self = (side == BLACK) ? (black) : (taken ^ black);
    bitbrd other = (side == BLACK) ? (taken ^ black) : (black);
    bitbrd empty = ~taken;
    // check north captures
    tempM = (self >> 8) & other;
    while(tempM) {
        bitbrd temp = (tempM >> 8);
        result |= temp & empty;
        tempM = temp & other;
    }
    // south
    tempM = (self << 8) & other;
    while(tempM) {
        bitbrd temp = (tempM << 8);
        result |= temp & empty;
        tempM = temp & other;
    }
    // east
    tempM = (self << 1) & other & 0xFEFEFEFEFEFEFEFE;
    while(tempM) {
        bitbrd temp = (tempM << 1) & 0xFEFEFEFEFEFEFEFE;
        result |= temp & empty;
        tempM = temp & other;
    }
    // west
    tempM = (self >> 1) & other & 0x7F7F7F7F7F7F7F7F;
    while(tempM) {
        bitbrd temp = (tempM >> 1) & 0x7F7F7F7F7F7F7F7F;
        result |= temp & empty;
        tempM = temp & other;
    }
    // ne
    tempM = (self >> 7) & other & 0xFEFEFEFEFEFEFEFE;
    while(tempM) {
        bitbrd temp = (tempM >> 7) & 0xFEFEFEFEFEFEFEFE;
        result |= temp & empty;
        tempM = temp & other;
    }
    // nw
    tempM = (self >> 9) & other & 0x7F7F7F7F7F7F7F7F;
    while(tempM) {
        bitbrd temp = (tempM >> 9) & 0x7F7F7F7F7F7F7F7F;
        result |= temp & empty;
        tempM = temp & other;
    }
    // sw
    tempM = (self << 7) & other & 0x7F7F7F7F7F7F7F7F;
    while(tempM) {
        bitbrd temp = (tempM << 7) & 0x7F7F7F7F7F7F7F7F;
        result |= temp & empty;
        tempM = temp & other;
    }
    // se
    tempM = (self << 9) & other & 0xFEFEFEFEFEFEFEFE;
    while(tempM) {
        bitbrd temp = (tempM << 9) & 0xFEFEFEFEFEFEFEFE;
        result |= temp & empty;
        tempM = temp & other;
    }

    legal = result;
}

int Board::numLegalMoves(Side side) {
    bitbrd result = 0;
    bitbrd tempM;
    bitbrd self = (side == BLACK) ? (black) : (taken ^ black);
    bitbrd other = (side == BLACK) ? (taken ^ black) : (black);
    bitbrd empty = ~taken;
    // check north captures
    tempM = (self >> 8) & other;
    while(tempM) {
        bitbrd temp = (tempM >> 8);
        result |= temp & empty;
        tempM = temp & other;
    }
    // south
    tempM = (self << 8) & other;
    while(tempM) {
        bitbrd temp = (tempM << 8);
        result |= temp & empty;
        tempM = temp & other;
    }
    // east
    tempM = (self << 1) & other & 0xFEFEFEFEFEFEFEFE;
    while(tempM) {
        bitbrd temp = (tempM << 1) & 0xFEFEFEFEFEFEFEFE;
        result |= temp & empty;
        tempM = temp & other;
    }
    // west
    tempM = (self >> 1) & other & 0x7F7F7F7F7F7F7F7F;
    while(tempM) {
        bitbrd temp = (tempM >> 1) & 0x7F7F7F7F7F7F7F7F;
        result |= temp & empty;
        tempM = temp & other;
    }
    // ne
    tempM = (self >> 7) & other & 0xFEFEFEFEFEFEFEFE;
    while(tempM) {
        bitbrd temp = (tempM >> 7) & 0xFEFEFEFEFEFEFEFE;
        result |= temp & empty;
        tempM = temp & other;
    }
    // nw
    tempM = (self >> 9) & other & 0x7F7F7F7F7F7F7F7F;
    while(tempM) {
        bitbrd temp = (tempM >> 9) & 0x7F7F7F7F7F7F7F7F;
        result |= temp & empty;
        tempM = temp & other;
    }
    // sw
    tempM = (self << 7) & other & 0x7F7F7F7F7F7F7F7F;
    while(tempM) {
        bitbrd temp = (tempM << 7) & 0x7F7F7F7F7F7F7F7F;
        result |= temp & empty;
        tempM = temp & other;
    }
    // se
    tempM = (self << 9) & other & 0xFEFEFEFEFEFEFEFE;
    while(tempM) {
        bitbrd temp = (tempM << 9) & 0xFEFEFEFEFEFEFEFE;
        result |= temp & empty;
        tempM = temp & other;
    }

    return countSetBits(result);
}

int Board::potentialMobility(Side side) {
    bitbrd result = 0;
    bitbrd temp;
    bitbrd other = (side == BLACK) ? (taken ^ black) : (black);
    bitbrd empty = ~taken;
    // check north
    temp = (other >> 8) & empty;
    temp <<= 8;
    result |= temp;
    // south
    temp = (other << 8) & empty;
    temp >>= 8;
    result |= temp;
    // east
    temp = (other << 1) & empty & 0xFEFEFEFEFEFEFEFE;
    temp >>= 1;
    result |= temp;
    // west
    temp = (other >> 1) & empty & 0x7F7F7F7F7F7F7F7F;
    temp <<= 1;
    result |= temp;
    // ne
    temp = (other >> 7) & empty & 0xFEFEFEFEFEFEFEFE;
    temp <<= 7;
    result |= temp;
    // nw
    temp = (other >> 9) & empty & 0x7F7F7F7F7F7F7F7F;
    temp <<= 9;
    result |= temp;
    // sw
    temp = (other << 7) & empty & 0x7F7F7F7F7F7F7F7F;
    temp >>= 7;
    result |= temp;
    // se
    temp = (other << 9) & empty & 0xFEFEFEFEFEFEFEFE;
    temp >>= 9;
    result |= temp;

    return countSetBits(result);
}

bitbrd Board::toBits(Side side) {
    if(side == BLACK)
        return black;
    else
        return (taken ^ black);
}

/*
 * Sets the board state given an 8x8 char array where 'w' indicates a white
 * piece and 'b' indicates a black piece. Mainly for testing purposes.
 */
void Board::setBoard(char data[]) {
    taken = 0;
    black = 0;
    for (int i = 0; i < 64; i++) {
        if (data[i] == 'b') {
            taken |= MOVEMASK[i];
            black |= MOVEMASK[i];
        } if (data[i] == 'w') {
            taken |= MOVEMASK[i];
        }
    }
}

bitbrd Board::getTaken() {
    return taken;
}
bitbrd Board::getBlack() {
    return black;
}

/*
 * Current count of given side's stones.
 */
int Board::count(Side side) {
    bitbrd i = (side == BLACK) ? (black) : (black^taken);

    #if defined(__x86_64__)
        asm ("popcnt %1, %0" : "=r" (i) : "r" (i));
        return (int) i;
    #elif defined(__i386)
        int a = (int) (i & 0xFFFFFFFF);
        int b = (int) ((i>>32) & 0xFFFFFFFF);
        asm ("popcntl %1, %0" : "=r" (a) : "r" (a));
        asm ("popcntl %1, %0" : "=r" (b) : "r" (b));
        return a+b;
    #else
        i = i - ((i >> 1) & 0x5555555555555555);
        i = (i & 0x3333333333333333) + ((i >> 2) & 0x3333333333333333);
        i = (((i + (i >> 4)) & 0x0F0F0F0F0F0F0F0F) *
              0x0101010101010101) >> 56;
        return (int) i;
    #endif
}

int Board::bitScanForward(bitbrd bb) {
    return index64[(int)(((bb ^ (bb-1)) * 0x03f79d71b4cb0a89) >> 58)];
}

int Board::bitScanReverse(bitbrd bb) {
    #if defined(__x86_64__)
        asm ("bsr %1, %0" : "=r" (bb) : "r" (bb));
        return (int) bb;
    #elif defined(__i386)
        int b = (int) ((bb>>32) & 0xFFFFFFFF);
        if(b) {
            asm ("bsrl %1, %0" : "=r" (b) : "r" (b));
            return b+32;
        }
        else {
            int a = (int) (bb & 0xFFFFFFFF);
            asm ("bsrl %1, %0" : "=r" (a) : "r" (a));
            return a;
        }
    #else
        const bitbrd debruijn64 = 0x03f79d71b4cb0a89;
        bb |= bb >> 1;
        bb |= bb >> 2;
        bb |= bb >> 4;
        bb |= bb >> 8;
        bb |= bb >> 16;
        bb |= bb >> 32;
        return index64[(int)((bb * debruijn64) >> 58)];
    #endif
}

int Board::countSetBits(bitbrd i) {
    #if defined(__x86_64__)
        asm ("popcnt %1, %0" : "=r" (i) : "r" (i));
        return (int) i;
    #elif defined(__i386)
        int a = (int) (i & 0xFFFFFFFF);
        int b = (int) ((i>>32) & 0xFFFFFFFF);
        asm ("popcntl %1, %0" : "=r" (a) : "r" (a));
        asm ("popcntl %1, %0" : "=r" (b) : "r" (b));
        return a+b;
    #else
        i = i - ((i >> 1) & 0x5555555555555555);
        i = (i & 0x3333333333333333) + ((i >> 2) & 0x3333333333333333);
        i = (((i + (i >> 4)) & 0x0F0F0F0F0F0F0F0F) *
              0x0101010101010101) >> 56;
        return (int) i;
    #endif
}
